{"version":3,"sources":["logo.svg","component/planet/sun/Sun.js","component/planet/moon/Moon.js","component/planet/cloud/Cloud.js","component/planet/Snow/Snow.js","component/planet/mist/Mist.js","component/planet/Rain/Rain-day.js","component/box/Box.js","component/Loader/Loader.js","component/Input/Input.js","containers/weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sun","className","src","alt","Moon","Cloud","Snow","Mist","Rain","Box","state","currentTime","wind","deg","renderPNG","weather","time","date","Date","this","setState","getHours","nameofday","getDay","getMinutes","props","sky","country","city","temp","feelsLike","temp_min","temp_max","windDeg","windSpeed","sunrise","sunset","night","whatTime","classes","classnames","timeandDate","children","toFixed","translate","Component","Loader","Input","inputRefs","React","createRef","current","focus","onChange","onKeyPress","value","ref","type","Weather","data","coord","loading","findPlace","onChangeHandler","e","target","getData","url","a","async","FIND_CITY","fetch","then","response","json","main","description","feels_like","pressure","humidity","speed","sys","name","console","log","key","find","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.704daff5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Sun.css'\r\nconst Sun = () => (\r\n    <div className=\"sun\">\r\n        <img src=\"../../../img/sun.png\" alt=\"\"/>   \r\n    </div>\r\n)\r\nexport default Sun","import React from 'react'\r\nimport './Moon.css'\r\nconst Moon = () =>(\r\n    <div className=\"moon\">\r\n        {/* <img src=\"http://pngimg.com/uploads/moon/moon_PNG40.png\" alt=\"\"/> */}\r\n    </div>\r\n)\r\nexport default Moon","import React from 'react'\r\nimport './Cloud.css'\r\nconst Cloud = () => (\r\n    <div className=\"cloud\">\r\n        {/* <img src=\"http://pngimg.com/uploads/cloud/cloud_PNG27.png\" alt=\"\"/> */}\r\n    </div>\r\n)\r\nexport default Cloud","import React from 'react'\r\nimport './Snow.css'\r\nconst Snow = () => (\r\n    <div className=\"Snow\">\r\n        {/* <img src=\"https://i.gifer.com/3klb.gif\" alt=\"\"/> */}\r\n    </div>\r\n)\r\nexport default Snow","import React from 'react'\r\nimport './Mist.css'\r\nconst Mist = () =>(\r\n    <div className=\"Mist\">\r\n        {/* <img src=\"http://pngimg.com/uploads/moon/moon_PNG40.png\" alt=\"\"/> */}\r\n    </div>\r\n)\r\nexport default Mist","import React from 'react'\r\nimport './Rain.css'\r\nconst Rain = () => (\r\n    <div className=\"Rain\">\r\n        {/* <img src=\"https://media.giphy.com/media/gGrEYlSniuiJMlfuR6/giphy.gif\" alt=\"\"/> */}\r\n    </div>\r\n)\r\nexport default Rain","import React,{Component} from 'react'\r\nimport './Box.css'\r\nimport Sun from '../planet/sun/Sun'\r\nimport Moon from '../planet/moon/Moon'\r\nimport Cloud from '../planet/cloud/Cloud'\r\nimport Snow from '../planet/Snow/Snow'\r\nimport classnames from 'classnames'\r\nimport Mist from '../planet/mist/Mist'\r\nimport RainDay from '../planet/Rain/Rain-day'\r\nexport default class Box extends Component {\r\n    state ={\r\n        currentTime: ''\r\n    }\r\n    componentDidMount(){\r\n        var date = new Date();\r\n        this.setState({\r\n            currentTime:date.getHours()\r\n        })\r\n     \r\n    }\r\n    \r\n    whatTime(time){\r\n       \r\n       return  time> 19 || time < 6 ? 'night' : 'day'\r\n       \r\n    }\r\n    wind =(deg = 150)=>{\r\n        if(deg > 180 && deg < 270 ){\r\n            return 'Юго-Запад'\r\n        }\r\n        if(deg > 270 && deg < 360 ){\r\n            return 'Северо-Запад'\r\n        }\r\n        if(deg > 0 && deg < 90 ){\r\n            return 'Северо-Восток'\r\n        }\r\n        if(deg > 180 && deg < 270 ){\r\n            return 'Юго-Восток'\r\n        }\r\n        \r\n    }\r\n    translate(weather){\r\n        switch(weather){\r\n            case 'Clear':\r\n                return 'Ясно'\r\n            case 'Clouds':\r\n                return 'Облачно'\r\n            case 'Snow':\r\n                return 'Снег'\r\n            case 'Rain':\r\n                return 'Дождь'\r\n            case 'Mist':\r\n                return 'Туман'\r\n            case 'Smoke':\r\n                return 'Смог'\r\n            default:\r\n                return 'goob'\r\n        }\r\n    }\r\n    renderPNG =(weather, time)=>{\r\n        if(time > 19 || time < 7 ){\r\n            //nightttttt\r\n            if(weather === 'Clear'){\r\n                return <Moon/>\r\n            }\r\n            if(weather === 'Clouds'){\r\n                return <Cloud/>\r\n            }\r\n            if(weather === 'Snow'){\r\n                return <Snow/>\r\n            }\r\n            if(weather === 'Rain'){\r\n                return <RainDay/>\r\n            }\r\n        }else{\r\n            //day\r\n            if(weather === 'Snow'){\r\n                return <Snow/>\r\n            }\r\n            if(weather === 'Rain'){\r\n                return <RainDay/>\r\n            }\r\n            if(weather === 'Clear'){\r\n                return <Sun/>\r\n            }\r\n            if(weather === 'Clouds'){\r\n                return <Cloud/>\r\n            }\r\n            if(weather === 'Mist'){\r\n                return <Mist/>\r\n            }\r\n            if(weather === 'Smoke'){\r\n                return <Mist/>\r\n            }\r\n        }\r\n   \r\n        \r\n    \r\n        \r\n    }\r\n    clock(){\r\n\r\n    }\r\n    timeandDate(date){\r\n        let nameofday = date.getDay()\r\n        switch(date.getDay()){\r\n            case 1:\r\n                  return <h4>{date.getHours()}:{date.getMinutes()}, Понедельник</h4>\r\n            case 2:\r\n                return <h4>{date.getHours()}:{date.getMinutes()}, Вторник</h4>\r\n            case 3:\r\n                return <h4>{date.getHours()}:{date.getMinutes()}, Среда</h4>\r\n            case 4:\r\n                return <h4>{date.getHours()}:{date.getMinutes()}, Четверг</h4>\r\n            case 5:\r\n                return <h4>{date.getHours()}:{date.getMinutes()}, Пятница</h4>\r\n            case 6:\r\n                return <h4>{date.getHours()}:{date.getMinutes()}, Суббота</h4>\r\n            case 7:\r\n                return <h4>{date.getHours()}:{date.getMinutes()}, Воскресенье</h4>\r\n            default:\r\n                 nameofday = \"Выходной\"\r\n        }\r\n        return <h4>{date.getHours()}:{date.getMinutes()}, {nameofday}</h4>\r\n    }\r\n    render(){\r\n        const {currentTime} = this.state\r\n        const {sky, country, city, temp, feelsLike, temp_min, temp_max, windDeg, windSpeed, sunrise, sunset} = this.props\r\n\r\n        const wind = this.wind(windDeg)\r\n        const night = this.whatTime(currentTime)\r\n        const classes = classnames(\r\n            'box',\r\n            night\r\n        );\r\n        return(\r\n            <div className={classes}>\r\n                {this.timeandDate(new Date())}\r\n                <h3>{city}, {country}</h3>\r\n                {this.props.children}\r\n                <div className=\"box-container\">\r\n                    <div className=\"box-container__item\">\r\n                        <p>за окном <span>{temp.toFixed(0)}</span></p>\r\n                        <p>по ощущениям <span>{feelsLike.toFixed(0)}</span></p>\r\n                        <p>min <span>{temp_min.toFixed(0)}</span>max <span>{temp_max.toFixed(0)}</span></p>\r\n                        <p></p>\r\n                        <p>ветер <span>{windSpeed}</span> m/s направление <span>{wind||'Южный'}</span></p>\r\n                    </div>\r\n                    <div className=\"box-container__item\">\r\n                        {this.renderPNG(sky, this.state.currentTime)}\r\n                        <h5>{this.translate(sky)}<span>, {temp.toFixed(0)}C</span></h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './Loader.css'\r\nconst Loader =()=>(\r\n    <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n)\r\nexport default Loader","import React, {Component} from 'react'\r\n\r\nexport default class Input extends Component {\r\n    componentDidMount(){\r\n        this.inputRefs.current.focus()\r\n    }\r\n    inputRefs  = React.createRef();\r\n    render(){\r\n        const {onChange,className,onKeyPress,value} = this.props\r\n        return(\r\n            <input \r\n            onChange={onChange}\r\n            className={className}\r\n            onKeyPress={onKeyPress}\r\n            value={value}\r\n            ref={this.inputRefs}\r\n            type=\"text\"/>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport Box from '../../component/box/Box'\r\nimport Loader from '../../component/Loader/Loader'\r\nimport Input from '../../component/Input/Input'\r\nexport default class Weather extends Component {\r\n    state={\r\n        data: [],\r\n        weather: [],\r\n        coord: [],\r\n        loading: true,\r\n        findPlace: ''\r\n    }\r\n    async componentDidMount(){\r\n        this.getData()\r\n    }\r\n    onChangeHandler = (e) =>{\r\n        this.setState({\r\n            findPlace: e.target.value\r\n        })\r\n    }\r\n     getData  = async(url)  =>{\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        try{\r\n            const FIND_CITY = this.state.findPlace || 'Лондон'\r\n            const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${FIND_CITY}&units=metric&APPID=349083c430ac053a45a0745df28c1425`)\r\n                                        .then(response=>response.json())\r\n            this.setState({\r\n                data: response,\r\n                coord: response.coord,\r\n                weather: {\r\n                    main: response.weather[0].main,\r\n                    description: response.weather[0].description,\r\n                    temp: response.main.temp,\r\n                    feelsLike: response.main.feels_like,\r\n                    temp_min: response.main.temp_min,\r\n                    temp_max: response.main.temp_max,\r\n                    pressure: response.main.pressure,\r\n                    humidity: response.main.humidity,\r\n                    windSpeed: response.wind.speed,\r\n                    windDeg: response.wind.deg,\r\n                    country: response.sys.country,\r\n                    sunrise: response.sys.sunrise,\r\n                    sunset: response.sys.sunset,\r\n                    name: response.name\r\n                },\r\n                loading: false,\r\n                findPlace: ''\r\n            })\r\n            \r\n            console.log(response);\r\n            \r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }\r\n    findPlace = ({key}) => {\r\n        if(key === 'Enter'){\r\n           let find = this.state.findPlace\r\n           this.getData(find)\r\n           this.setState({\r\n            findPlace: ''\r\n           })\r\n        }\r\n    }\r\n    render(){\r\n        const { weather} = this.state\r\n        return(\r\n            <div>\r\n                {/* <input type='text'  onKeyPress={this.findPlace} onChange={this.onChangeHandler} value={this.state.findPlace}/> */}\r\n                {!this.state.loading \r\n                ?\r\n                <Box\r\n                sky={weather.main}\r\n                country={weather.country}\r\n                city={weather.name}\r\n                temp={weather.temp}\r\n                temp_max={weather.temp_max}\r\n                temp_min={weather.temp_min}\r\n                feelsLike={weather.feelsLike}\r\n                windSpeed={weather.windSpeed}\r\n                windDeg={weather.windDeg}\r\n                sunrise={weather.sunrise}\r\n                sunset={weather.sunset}\r\n                >\r\n                <Input\r\n                    type=\"text\"\r\n                    className=\"box-input\"\r\n                    onKeyPress={this.findPlace} \r\n                    onChange={this.onChangeHandler}\r\n                    value={this.state.findPlace}\r\n                /></Box>:<Loader/>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Weather from './containers/weather/Weather'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n       <Weather/>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}